<?php

/**
 * @file
 * Tests for the OpenBlog project
 */

/**
 * Tests for the install and content.
 *
 */
class OpenBlogContentTestCase extends DrupalWebTestCase {
  protected $profile = 'openblog';

  public static function getInfo() {
    return array(
      'name' => 'OpenBlog Content',
      'description' => 'Tests the Post content-type in the OpenBlog Content feature.',
      'group' => 'OpenBlog',
    );
  }

  public function setUp() {
    parent::setUp('openblog_content');
  }

  /**
   * Tests OpenBlog's default settings.
   */
  public function testOpenBlogContentDefaultSettings() {
    // Testing for the markdown filter
    $md_filters_name = array(
      'codefilter',
      'filter_markdown',
      'gist_filter',
      'video_filter',
    );
    foreach ($md_filters_name as $filter) {
      $md_query = db_select('filter', 'f');
      $md_query->addField('f', 'status');
      $md_query->condition('format', 'markdown');
      $md_query->condition('name', $filter);
      $result = $md_query->execute()->fetchObject();
      $this->assertEqual($result->status, 1, t('The filter "@filter" has not been enabled', array('@filter', $filter)));
    }

    // Test default blocks
    $blocks = array(
      'system' => 'main',
    );
    foreach ($blocks as $module => $delta) {
      $block_query = db_select('block', 'b');
      $block_query->addField('b', 'status');
      $block_query->condition('module', $module);
      $block_query->condition('delta', $delta);
      $result = $block_query->execute()->fetchObject();
      $this->assertEqual($result->status, 1, t('The block "@module" "@delta" is not enabled.', array('@module' => $module, '@delta' => $delta)));
    }

    // Check variables
    $tests = array(
      'theme_default' => 'subtle_simplicity',
      'admin_theme' => 'seven',
      'user_pictures' => '1',
      'user_picture_dimensions' => '1024x1024',
      'user_picture_file_size' => '800',
      'user_picture_style' => 'thumbnail',
      'site_frontpage' => 'homepage',
      'user_register' => USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL,
      'honeypot_element_name' => 'homepage',
      'honeypot_form_comment_node_post_form' => 1,
      'honeypot_form_post_node_form' => 0,
      'honeypot_form_user_pass' => 1,
      'honeypot_form_user_register_form' => 1,
      'honeypot_log' => 0,
      'honeypot_protect_all_forms' => 0,
      'honeypot_time_limit' => '5',
      'date_format_long' => 'l, F j, Y - g:ia',
      'date_format_medium' => 'F j, Y - g:ia',
      'date_format_short' => 'M j Y - H:i',
      'pathauto_node_post_pattern' => 'posts/[node:created:custom:Y]/[node:created:custom:m]/[node:created:custom:d]/[node:title]'
    );
    foreach($tests as $key => $value) {
      $message = t('The variable "@key" is not @value', array('@key' => $key, '@value' => $value));
      $var = variable_get($key, '');
      $this->assertEqual($var, $value, $message);
    }

    $theme_subtle_simplicity_settings = variable_get('theme_subtle_simplicity_settings', array());
    $this->assertTrue(in_array('toggle_logo', array_keys($theme_subtle_simplicity_settings)), t('The variable "toggle_logo" is not set'));

    // Test permissions
    $roles = array(
      array(
        'name' => 'author',
        'perms' => array(
          'create post content',
          'delete own post content',
          'edit own post content',
          'revert revisions',
          'view own unpublished content',
          'view revisions',
        ),
      ),
      array(
        'name' => 'editor',
        'perms' => array(
          'bypass node access',
          'administer comments',
          'administer nodes',
          'administer users',
          'assign author role',
          'assign editor role',
          'create post content',
          'delete own post content',
          'delete any post content',
          'edit own post content',
          'edit any post content',
          'revert revisions',
          'view own unpublished content',
          'view revisions',
        ),
      ),
    );

    foreach ($roles as $role) {
      $role_id_query = db_select('role', 'r');
      $role_id_query->addField('r', 'name');
      $role_id_query->addField('r', 'rid');
      $role_id_query->condition('name', $role['name']);
      $role_id = $role_id_query->execute()->fetchObject();
      $this->assertEqual($role_id->name, $role['name'], t('The role name is not @role', array('@role' => $role['name'])));

      // Make sure the the default permissions exist in the database and are 
      // assigned to the proper role.
      foreach($role['perms'] as $perm) {
        $perm_query = db_select('role_permission', 'r');
        $perm_query->addField('r', 'permission');
        $perm_query->condition('rid', $role_id->rid);
        $perm_query->condition('permission', $perm);
        $perm_result = $perm_query->execute()->fetchObject();
        $this->assertEqual($perm_result->permission, $perm, t('The permission "@perm" is wrong.', array('@perm' => $perm)));
      }
    }

    // Make sure the administrator role exits.
    $admin_role_query = db_select('role', 'r');
    $admin_role_query->addField('r', 'name');
    $admin_role_query->condition('name', 'administrator');
    $admin_role = $admin_role_query->execute()->fetchObject();
    $this->assertEqual($admin_role->name, 'administrator', t('The administrator role does not exist.'));

    $node_options_post = variable_get('node_options_post', array());
    $this->assertEqual(in_array('promote', array_keys($node_options_post)), t('The variable "node_options_post" is not set.'));

    // Make sure post_tags vocabulary exists
    $names = taxonomy_vocabulary_get_names();
    $this->assertTrue(in_array('post_tags', array_keys($names)), 'the vocabulary post_tags exists');

    // Make sure image styles exist
    $styles = image_styles();
    $installed_styles = array(
      'post-full',
      'post-large-left',
      'post-large-right',
      'post-medium-left',
      'post-medium-right',
      'post-thumb-left',
      'post-thumb-right',
    );
    foreach($installed_styles as $style) {
      $this->assertTrue(in_array($style, array_keys($styles)), t('The thumbnail image style does not exist.'));
    }

    // Make sure the views exist
    $views = views_get_all_views();
    $this->assertTrue(in_array('homepage', array_keys($views)), t('The homepage view does not exist.'));
    $this->assertTrue(in_array('openblog_archive', array_keys($views)), t('The openblog_archive view does not exist.'));
  }

  /**
   * Tests creating content.
   */
  public function testOpenBlogContentPostCreate() {
    $user = $this->drupalCreateUser(array(
      'bypass node access',
    ));
    $this->drupalLogin($user);

    $this->drupalGet("/");
    $this->assertResponse(200, t('This should work'));

    // Create node to edit.
    $edit = array();
    $edit['title'] = $this->randomName(8);
    $edit["body[und][0][value]"] = $this->randomName(16);
    $this->drupalPost('node/add/post', $edit, t('Save'));
    $this->assertText(t('Post @title has been created.', array('@title' => $edit['title'])));

    // Make sure that the node is unpublished by default
    $node_query = db_select('node', 'n');
    $node_query->addField('n', 'nid');
    $node_query->addField('n', 'status');
    $node_query->condition('title', $edit['title']);
    $node = $node_query->execute()->fetchObject();
    $this->assertEqual($node->status, 0, t('The node is published.'));

  }

  /**
   * Tests the roles.
   */
  public function testOpenBlogRolesPostContent() {
    // Testing the author role
    $author = $this->drupalCreateUser(array(
      'create post content',
      'delete own post content',
      'edit own post content',
      'revert revisions',
      'view own unpublished content',
      'view revisions',
    ));
    $this->drupalLogin($author);

    // Create a post
    $edit = array();
    $edit['title'] = $this->randomName(8);
    $edit["body[und][0][value]"] = $this->randomName(16);
    $this->drupalPost('node/add/post', $edit, t('Save'));
    
    // It should have a message from drupal_set_message
    $this->assertText(t('Post @title has been created.', array('@title' => $edit['title'])));

    // Make sure it is unpublished
    $this->drupalGet('/admin/content');
    $this->assertText(t('not published'));

    // Make sure the user can edit a post, we know that this is going to be node 1
    $edit = array();
    $edit['title'] = $this->randomName(8);
    $edit["body[und][0][value]"] = $this->randomName(64);
    $this->drupalPost('node/1/edit', $edit, t('Save'));

    // Make sure the message is displayed on the page
    $this->assertText(t('Post @title has been updated.', array('@title' => $edit['title'])));

    // Make sure that the post is listed on the homepage.
    $this->drupalGet('/');
    $this->assertNoText(t('@title', array('@title' => $edit['title'])), 'The published node does not display on the homepage.');

    // Make sure the author cannot do anything with 
    $this->drupalGet('node/add/post');
    $this->assertNoText(t('Menu settings'), 'The text "Menu settings" appears on the Post add page.');
    $this->assertNoText(t('Revision information'), 'The text "Revision information" appears on the Post add page.');
    $this->assertNoText(t('URL path settings'), 'The text "URL path settings" appears on the Post add page.');
    $this->assertNoText(t('Comment settings'), 'The text "Comment settings" appears on the Post add page.');
    $this->assertNoText(t('Authoring information'), 'The text "Authoring information" appears on the Post add page.');
    $this->assertNoText(t('Publishing options'), 'The text "Publishing options" appears on the Post add page.');
    $this->drupalLogout();

    // Testing the editor role
    $editor = $this->drupalCreateUser(array(
      'bypass node access',
      'administer comments',
      'administer nodes',
      'administer users',
      'assign author role',
      'assign editor role',
      'create post content',
      'delete own post content',
      'delete any post content',
      'edit own post content',
      'edit any post content',
      'revert revisions',
      'view own unpublished content',
      'view revisions',
    ));
    $this->drupalLogin($editor);

    // Create a post
    $edit = array();
    $edit['title'] = $this->randomName(8);
    $edit["body[und][0][value]"] = $this->randomName(16);
    $this->drupalPost('node/add/post', $edit, t('Save'));
    
    // It should have a message from drupal_set_message
    $this->assertText(t('Post @title has been created.', array('@title' => $edit['title'])));

    // Make sure it is unpublished
    $this->drupalGet('/admin/content');
    $this->assertText(t('not published'));

    // Make sure the user can edit a post, we know that this is going to be node 1
    $edit = array();
    $edit['title'] = $this->randomName(8);
    $edit["body[und][0][value]"] = $this->randomName(64);
    $edit["status"] = 1;
    $this->drupalPost('node/1/edit', $edit, t('Save'));

    $this->assertText(t('Post @title has been updated.', array('@title' => $edit['title'])));

    // Make sure that the post is listed on the homepage.
    $this->drupalGet('/');
    $this->assertText(t('@title', array('@title' => $edit['title'])), 'The published node does not display on the homepage.');

    // Make sure the author cannot do anything with 
    $this->drupalGet('node/add/post');
    $this->assertNoText(t('Menu settings'), 'The text "Menu settings" appears on the Post add page.');
    $this->assertText(t('Revision information'), 'The text "Revision information" appears on the Post add page.');
    $this->assertNoText(t('URL path settings'), 'The text "URL path settings" appears on the Post add page.');
    $this->assertText(t('Comment settings'), 'The text "Comment settings" appears on the Post add page.');
    $this->assertText(t('Authoring information'), 'The text "Authoring information" appears on the Post add page.');
    $this->assertText(t('Publishing options'), 'The text "Publishing options" appears on the Post add page.');
    $this->drupalLogout();
  }
}

